[
  {
    "objectID": "tutorial_pages/simulate-for-preregistration.html",
    "href": "tutorial_pages/simulate-for-preregistration.html",
    "title": "Simulating data to check or preregister code",
    "section": "",
    "text": "Simulating data to check or preregister code\nOne of the simplest uses of simulations is to make a dataset on which you can run and therefore pre-specify your analytic code.\nFor example, let’s say you plan to collect an observational dataset and want to look at the effect of smoking on lung cancer. A typical protocol might state that the data will be analysed by logistic regression, adjusting for confounders. But which confounders exactly? How will each variable be coded? What type of logistic regression will you use?\nMaking a dataset that has the variables you expect your real dataset will have allows you to exactly state (in code rather than potentially ambiguous words) what you will do.\nThis is really useful if you want input, e.g. from a statistician – they can look at your code and more clearly see what you are trying to do. It has the added benefit of forcing you to really think about what your dataset will look like! I’ve found this to be very useful in the past.\nIt’s very easy to make a dataset. Let’s take the simple example about smoking and lung cancer. We are interested in only 4 variables:\n\nsmoking_status, a binary variable indicating whether an individual smokes (Yes/No).\nlung_cancer, a binary variable indicating whether an individual has lung cancer (Yes/No).\nsex, a binary variable indicating an individual’s sex (M/F).\nage, a numeric variable containing an individual’s age (in years).\n\nHere is the top of the simulated dataset.\n \n\n\nYOUR TURN:\n\nCan you recreate it? Try it yourself!\nHINT: use the data.frame(), sample(), and rnorm() functions.\nNow that you’ve made a dataset, try to run a logistic regression on your data with lung_cancer as the outcome.\nDo you face any error message? Does the data need to be in a specific format for statistical models to run?\n\n\nOnce we have a working model, we can look at the summary and make sure it behaves as we expected, and we can share the code with collaborators or reviewers.\nYou could combine this approach with the sampling approaches you learned on the previous two pages to look at power for more complex analyses like this.\n \n\nAnd that’s it! We have written down our code in a way that is totally unambiguous. This practice is useful for any project: you can include the exact code that you plan to use in a preregistration, and reviewers will be able to verify that you did what you planned.\nA real example of a simple simulation like this, used in the submission of a registered report, can be found in the R Markdown file here.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Simulate to prepare a preregistration"
    ]
  },
  {
    "objectID": "tutorial_pages/sample-size-n.html",
    "href": "tutorial_pages/sample-size-n.html",
    "title": "Sample size n",
    "section": "",
    "text": "Sample size n\nHow many values should you generate within a simulation? Let’s explore.\nIf I draw 10 data points from a normal distribution with a mean of 0 and a standard deviation of 1 (i.e N(0,1)), after setting the seed to 10 (for no specific reason), here is the distribution of the values I get:\n1 simulation of N(0,1) with n = 10:\n\n\nIf I repeat this simulation 24 times, here are the distributions of the 10 values pseudo-randomly sampled from N(0,1):\n24 simulations of N(0,1) with n = 10:\n \n\nNote that because we are drawing from N(0,1), we expect the mean of the values drawn (mean(x), blue lines) to be very close to 0, i.e. the mean of the normal distribution we sample from (red dashed lines).\n\nHow are the means and standard deviations of the 24 simulations distributed?\nDistributions of the means and SDs from 24 simulations of N(0,1) with n = 10:\n \n\nNow, let’s do the same with a sample size n of 1000.\n24 simulations of the same distribution, i.e. N(0,1), with n = 1000:\n \n\nDistributions of the means and SDs from 24 simulations of N(0,1) with n = 1000:\n \n\n\nConclusion\nThe sample size within a simulation affects the precision with which the parameters of that distribution can be estimated.\nWhat should determine the sample size within your simulation?\nChoose a sample size that is relevant to the context of the simulation, e.g. the sample size you will be able to reach in your study or the minimum sample size that would allow you to detect the smallest effect of interest (as determined by a power analysis, which we will cover in a moment).\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Sample size `n`"
    ]
  },
  {
    "objectID": "tutorial_pages/repeat.html",
    "href": "tutorial_pages/repeat.html",
    "title": "Repetition",
    "section": "",
    "text": "Repetition\nThe function\n\nreplicate(nrep, expression) repeats the expression provided nrep times.\n\nFor example, replicate(10, mean(rnorm(100))) reads: ‘Draw 100 values from a normal distribution with a mean of 0 and a standard deviation of 1 (the default values of rnorm(n, mean, sd)), calculate the mean of these 100 values, and do all that 10 times.’\n\nYOUR TURN:\nIn your local exercise script:\n1. Repeat 1000 times the calculation of the mean of 10 values drawn from a uniform distribution between 0 and 10.\n2. Repeat 100 times the calculation of the mean of 50 values drawn from a normal distribution with a mean of 10 and a standard deviation of 5.\n3. Make a histogram of your results for each task. Are the distributions looking as expected?\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Repeat"
    ]
  },
  {
    "objectID": "tutorial_pages/random-numbers-generators.html",
    "href": "tutorial_pages/random-numbers-generators.html",
    "title": "Random number generators",
    "section": "",
    "text": "Random number generators\nR contains several functions to generate random numbers.\nType ?function in your console to get information on the function’s arguments (i.e. the values that must be provided to obtain the function’s result).\nThe function sample(x, n, replace = FALSE) draws n values from a given vector x without replacement (by default).\nSampling without replacement means that when you repeatedly draw e.g. one item at a time from a pool of items, any item selected during the first draw is not available for selection during the second draw, and the first and second selected items are not in the pool to select from during the third draw, etc. Sampling with replacement means that all the original options are available at each draw.\n\nYOUR TURN:\nSample 100 values between 3 and 103 with replacement. For this, open the file ./exercise_script.R from the root of your local repository (with or without answers), review the examples if needed, complete the exercise, and check out the proposed answer.\n\nThe following functions draw n values from distributions with the specified parameters:\n\nrunif(n, min, max) draws n values from a uniform distribution with the specified min and max.\n\nrpois(n, lambda) draws n values from a Poisson distribution with the specified lambda.\n\nrnorm(n, mean, sd) draws n values from a normal distribution with the specified mean and standard deviation sd.\n\nrbinom(n, prob) draws n values from a binomial distribution with the specified probability prob.\n\n\nYOUR TURN:\n1. Draw 100 values from a normal distribution with a mean of 0 and a standard deviation of 1.\n2. Draw 50 values from a normal distribution with a mean of 10 and a standard deviation of 5.\n3. Draw 1000 values from a Poisson distribution with a lambda of 50.\n4. Draw 30 values from a uniform distribution between 0 and 10.\nTry it out in your local exercise script.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Random number generators"
    ]
  },
  {
    "objectID": "tutorial_pages/number-of-simulations-nrep.html",
    "href": "tutorial_pages/number-of-simulations-nrep.html",
    "title": "Number of simulations nrep",
    "section": "",
    "text": "Number of simulations nrep\nSampling theory applies to the number of simulations nrep just as much as the sample size n within a simulation.\nMeans and SDs from 24 simulations of N(0,1) with n = 10:\n \n\nNow, let’s do the same with a number of repeats nrep of 1000.\nMeans and SDs from 1000 simulations of N(0,1) with n = 10:\n \n\n\nConclusion\nThe number of simulations needs to be a large enough number to obtain a good representation of the distribution of the simulation results, e.g. 1000.\n\nYOUR TURN:\nThe code generating the data and plots presented above are included in your exercise script. Feel free to modify the parameters of the functions that simulate data and plot the results to better understand the principles presented in these two pages, but, at this stage, there is no need to fully understand the code that generates the plots.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Number of simulations `nrep`"
    ]
  },
  {
    "objectID": "tutorial_pages/general-structure.html",
    "href": "tutorial_pages/general-structure.html",
    "title": "General structure of a simulation",
    "section": "",
    "text": "General structure of a simulation\n\nDefine what type of data and variables need to be simulated, i.e. their distribution, their class (e.g. factor vs. numerical values), sample sizes (within a dataset and number of replicates), what will need to vary (e.g. the strength of relationship), etc.\nGenerate data, random data or data including an effect (e.g. an imposed correlation between two variables).\nRun the statistical test you think is appropriate and record the relevant statistic (e.g. p-value).\nReplicate step 2 and 3 to get the distribution of the statistic of interest.\nTry out different parameter sets (explore the parameter space for which results are similar).\nAnalyse and interpret the combined results of many simulations within each set of parameters. For instance, check that you only get a significant result in 5% of the simulations (if alpha = 0.05) when you simulated no effect and that you get a significant result in 80% of the simulations (if you targeted a power of 80%) when you simulated an effect.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "General structure"
    ]
  },
  {
    "objectID": "tutorial_pages/download-repo.html",
    "href": "tutorial_pages/download-repo.html",
    "title": "Make this repository a local RStudio project",
    "section": "",
    "text": "You have two options to fetch this material:\n\n\nFork and clone this repository (here is a reminder on how to do this).\n\n\n\n1) Download the repository\nPlease download the GitHub repository that we are using today: https://github.com/lmu-osc/Introduction-Simulations-in-R.\n \n\nOnce the .zip file downloaded, extract it and place the folder in the desired directory (e.g. Documents).\n2) Turn it into an RStudio project\nIf you do not have R or RStudio installed, please follow these instructions first.\nOpen RStudio, go to ‘File’, choose ‘New Project…’, and select ‘Existing Directory’.\n \n\nSelect the downloaded (and extracted) folder by clicking on ‘Browse’, then select ‘Create Project’.\n \n\nIn the panel containing the ‘Files’ tab, find the exercise sheet and open it by double clicking on it.",
    "crumbs": [
      "Tutorial",
      "Download the material"
    ]
  },
  {
    "objectID": "tutorial_pages/download-repo.html#a.-you-know-version-control-with-git-and-github",
    "href": "tutorial_pages/download-repo.html#a.-you-know-version-control-with-git-and-github",
    "title": "Make this repository a local RStudio project",
    "section": "",
    "text": "Fork and clone this repository (here is a reminder on how to do this).",
    "crumbs": [
      "Tutorial",
      "Download the material"
    ]
  },
  {
    "objectID": "tutorial_pages/download-repo.html#b.-you-do-not-know-version-control-andor-simply-want-to-download-a-copy-of-this-material",
    "href": "tutorial_pages/download-repo.html#b.-you-do-not-know-version-control-andor-simply-want-to-download-a-copy-of-this-material",
    "title": "Make this repository a local RStudio project",
    "section": "",
    "text": "1) Download the repository\nPlease download the GitHub repository that we are using today: https://github.com/lmu-osc/Introduction-Simulations-in-R.\n \n\nOnce the .zip file downloaded, extract it and place the folder in the desired directory (e.g. Documents).\n2) Turn it into an RStudio project\nIf you do not have R or RStudio installed, please follow these instructions first.\nOpen RStudio, go to ‘File’, choose ‘New Project…’, and select ‘Existing Directory’.\n \n\nSelect the downloaded (and extracted) folder by clicking on ‘Browse’, then select ‘Create Project’.\n \n\nIn the panel containing the ‘Files’ tab, find the exercise sheet and open it by double clicking on it.",
    "crumbs": [
      "Tutorial",
      "Download the material"
    ]
  },
  {
    "objectID": "tutorial_pages/check-power.html",
    "href": "tutorial_pages/check-power.html",
    "title": "Checking power through simulations",
    "section": "",
    "text": "Checking power through simulations\nThe power of a statistical test tells us the probability that the test correctly rejects the null hypothesis. In other words, if we only examine true effects, the power is the proportion of tests that will (correctly) reject the null hypothesis. Often, the power is set to 80%, though, as with alpha = 0.05, this is an arbitrary choice.\nGenerally, we want to do power analysis before collecting data, to work out the sample size we need to detect some effect. If we are calculating a required sample size, the power analysis can also be called a sample size calculation.\nTaking the example of a t-test, we need to understand a few parameters:\n\nn, the sample size.\ndelta, the difference in means that you want to be able to detect. Deciding what this value should be is tricky. You might rely on estimates from the literature (though bear in mind they are likely to be inflated), or you can use a minimally important difference, which is the threshold below which you do not consider a difference interesting enough to be worth detecting. In a clinical trial, for example, this might be the smallest difference that a patient would care about.\nsd, the standard deviation. Usually, this needs to be estimated from the literature or pilot studies.\nsig.level, the alpha, as discussed previously.\npower, the power as defined above.\n\nYou can calculate any one of these parameters, given all of the others. We usually want to specify, delta, sd, sig.level and power and calculate the required sample size.\nWe can calculate the required sample size for a t-test using:\npower.t.test(n = NULL, delta = 0.5, sd = 1, sig.level = 0.05, power = 0.8)\nNotice that n = NULL, so this parameter is calculated.\nThe sample size n we need, given this set of parameters, is 64 per group.\nJust as we can check the alpha of our test by sampling from the same distribution (i.e. simulating data without an effect), we can check the power by sampling from different distributions (i.e. simulating data with an effect).\nIf we sample values from two normal distributions with different means (e.g. N(0,1) and N(0.5,1)), what is the minimum sample size we need to detect a significant difference in means with a t-test 80% of the time?\n\nYOUR TURN:\n1. Use your simulation skills to work out the power through simulation. Write a function that does the following:\n\nDraws n values from a random normal distribution with mean1 and another n values from a normal distribution with mean2.\nCompares the means of these two samples with a t-test and extracts the p-value.\n\n\nReplicate the function 1000 times using the parameters used in the power calculation above (that used the power.t.test() function).\nCalculate the proportion of p-values that are smaller than 0.05.\n\n\np-values of t-tests comparing means from 1000 simulations of N(0,1) and N(0.5,1) with n = 64:\n \n\nThe proportion of correctly rejected null hypotheses in the simulation is close to 0.8, which is what we would expect.\nUsing simulations for power analysis is not really necessary for simple examples like a t-test, though it is useful to check your understanding.\nWhen analyses become complex and it is hard or impossible to determine a sample size analytically (i.e. you can’t calculate it, or there’s no suitable function to use), then simulations are an indispensable tool.\nA simple example of a power analysis like the one you’ve just done can be found in the “Power analysis” section of this paper:\n\nBlanco, D., Schroter, S., Aldcroft, A., Moher, D., Boutron, I., Kirkham, J. J., & Cobo, E. (2020). Effect of an editorial intervention to improve the completeness of reporting of randomised trials: a randomised controlled trial. BMJ Open, 10(5), e036799. https://doi.org/10.1136/bmjopen-2020-036799\n\nA complete self-paced tutorial to simulate data for power analysis of complex statistical designs can be found here:\n\nhttps://lmu-osc.github.io/Simulations-for-Advanced-Power-Analyses/\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Simulate to check power"
    ]
  },
  {
    "objectID": "tutorial_pages/basic-principles.html",
    "href": "tutorial_pages/basic-principles.html",
    "title": "Basic principles",
    "section": "",
    "text": "Basic principles\nBasically, a simulation consist in:\n1) Generating n random numbers from a known distribution.\n2) Repeating this nrep times.\nOnce you know how to do this, the questions we will explore are:\n1) What sample size n should we use within a simulation?\n2) How many simulations nrep should we run?\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Basic principles"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Simulations in R",
    "section": "",
    "text": "This tutorial was created by Malika Ihle based on materials from Joel Pick, Hadley Wickham, and Kevin Hallgren, with contributions from James Smith.\nIt is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n\n\n\n\nHave R and RStudio installed. If you don’t, follow these instructions.\n\nKnow some R basics (e.g. how to select a value in a data frame, how to create a vector). If you don’t, visit the following tutorial: https://lmu-osc.github.io/introduction-to-R/.\n\n\n\n\n\nWatch this 30-minute introduction to credible research, which contextualises the importance of simulations for reliable research.\nRead Hallgren, A. K. (2013). Conducting simulation studies in the R programming environment. Tutorials in Quantitative Methods for Psychology, 9(2), 43–60.\n\n\n\n\n\n\nThe self-paced tutorial (pages linked below) will alternate presentation of concepts and simple exercises for you to try to apply them in R. Each time you see written YOUR TURN, switch to your local copy of the exercise script (you can choose between a file with or without the solutions depending on e.g. your level of familiarity with R), review the examples if needed, complete the exercise, and check out the proposed answer (which often contains additional tips). Come back to the online tutorial and after finishing one page, you can navigate to the next page linked at the bottom to continue. The exercise script contains code for all the exercises and code that generates the plots that appear in the online tutorial, all in order of appearance in the tutorial.\nIt is necessary that you work through the sections of the tutorial in order. Please read the blurbs of each section below to get an overview of this workshop. Then click on the first page ‘Download the material’ and follow along by navigating to the next page linked at the bottom of each page! You can get back to this overview at any time by clicking on the title ‘Introduction-Simulations-in-R’ at the top of each page.\n\n\n\n\nDownload the material – Get this tutorial onto your machine.\nDefinition – What are simulations?\nPurpose – What can we use simulations for?\nBasic principles – What do we need to create a simulation?\nRandom number generators – How to generate random numbers in R?\nRepeat – How to repeat the generation of random numbers multiple times?\nSetting the seed – How can you generate the same random numbers?\nSample size n – How many values should you generate within a simulation?\nNumber of simulations nrep – How many repeats of a simulation should you run?\nDry rule – How to write your own functions?\nSimulate to check alpha – Write your first simulation and check the rate of false-positive findings.\n\nSimulate to check power – Simulate data to perform a power analysis.\n\nSimulate to prepare a preregistration – Simulate data to test statistical analyses before preregistering them.\n\nGeneral structure – What is the general structure of a simulation?\nLimitations – What are the limitations of simulations?\nReal-life example – What are real-life examples of simulations?\nAdditional resources – What resources can help you write your own simulation?",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#about-this-work",
    "href": "index.html#about-this-work",
    "title": "Introduction to Simulations in R",
    "section": "",
    "text": "This tutorial was created by Malika Ihle based on materials from Joel Pick, Hadley Wickham, and Kevin Hallgren, with contributions from James Smith.\nIt is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Introduction to Simulations in R",
    "section": "",
    "text": "Have R and RStudio installed. If you don’t, follow these instructions.\n\nKnow some R basics (e.g. how to select a value in a data frame, how to create a vector). If you don’t, visit the following tutorial: https://lmu-osc.github.io/introduction-to-R/.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#prior-to-the-session-optional-preparation-to-get-familiarised-with-the-subject",
    "href": "index.html#prior-to-the-session-optional-preparation-to-get-familiarised-with-the-subject",
    "title": "Introduction to Simulations in R",
    "section": "",
    "text": "Watch this 30-minute introduction to credible research, which contextualises the importance of simulations for reliable research.\nRead Hallgren, A. K. (2013). Conducting simulation studies in the R programming environment. Tutorials in Quantitative Methods for Psychology, 9(2), 43–60.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#self-paced-workshop",
    "href": "index.html#self-paced-workshop",
    "title": "Introduction to Simulations in R",
    "section": "",
    "text": "The self-paced tutorial (pages linked below) will alternate presentation of concepts and simple exercises for you to try to apply them in R. Each time you see written YOUR TURN, switch to your local copy of the exercise script (you can choose between a file with or without the solutions depending on e.g. your level of familiarity with R), review the examples if needed, complete the exercise, and check out the proposed answer (which often contains additional tips). Come back to the online tutorial and after finishing one page, you can navigate to the next page linked at the bottom to continue. The exercise script contains code for all the exercises and code that generates the plots that appear in the online tutorial, all in order of appearance in the tutorial.\nIt is necessary that you work through the sections of the tutorial in order. Please read the blurbs of each section below to get an overview of this workshop. Then click on the first page ‘Download the material’ and follow along by navigating to the next page linked at the bottom of each page! You can get back to this overview at any time by clicking on the title ‘Introduction-Simulations-in-R’ at the top of each page.\n\n\n\n\nDownload the material – Get this tutorial onto your machine.\nDefinition – What are simulations?\nPurpose – What can we use simulations for?\nBasic principles – What do we need to create a simulation?\nRandom number generators – How to generate random numbers in R?\nRepeat – How to repeat the generation of random numbers multiple times?\nSetting the seed – How can you generate the same random numbers?\nSample size n – How many values should you generate within a simulation?\nNumber of simulations nrep – How many repeats of a simulation should you run?\nDry rule – How to write your own functions?\nSimulate to check alpha – Write your first simulation and check the rate of false-positive findings.\n\nSimulate to check power – Simulate data to perform a power analysis.\n\nSimulate to prepare a preregistration – Simulate data to test statistical analyses before preregistering them.\n\nGeneral structure – What is the general structure of a simulation?\nLimitations – What are the limitations of simulations?\nReal-life example – What are real-life examples of simulations?\nAdditional resources – What resources can help you write your own simulation?",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "tutorial_pages/check-alpha.html",
    "href": "tutorial_pages/check-alpha.html",
    "title": "Using simulations to check alpha",
    "section": "",
    "text": "Using simulations to check alpha\nIn most quantitative sciences, we accept a type I error rate of 0.05, which is often called the alpha or significance level. This value tells us the probability of rejecting the null hypothesis (i.e. of finding an effect) given that the null hypothesis is true.\nIn other words, if there is no true effect (e.g. no difference between two groups), we would expect our null hypothesis of no effect to be rejected (incorrectly) (alpha * 100)% of the time.\nIf you draw from the same normal distribution twice, will the mean of the two samples differ significantly in 5% of the cases?\n\nYOUR TURN:\n1. Figure out how to do a t-test in R.\n2. Generate two vectors of 10 values drawn from N(0,1) and compare them with a t-test.\n3. Figure out how to extract the p-value from that object (explore your R object with the functions str() or names()).\n4. Write a function simT() that generates two vectors of n values drawn from a standard normal distribution (N(0,1)), compares them with a t-test, and returns the p-value.\n5. Test your function by calling it for n = 50.\n6. For n = 10, generate nrep = 20 repetitions and draw a histogram.\n7. Repeat the previous task with nrep = 100.\n\np-values of t-tests comparing means from 20 or 100 simulations of N(0,1) with n = 10:\n \n\nIn the first case, where nrep = 20, we expect 1 out of the 20 tests to be significant (5%). In my case, I did! How many did you get?\nIn the second case, where nrep = 100, we expect 5 out of the 100 tests to be significant. In my case, I got 6. How many did you get?\nAre those deviations meaningful? Are they significant?\n\nYOUR TURN:\n1. Plot a histogram of nrep = 1000 outputs of the function simT with n = 10.\n2. Plot a histogram of nrep = 1000 outputs of the function simT with n = 100.\n\np-values of t-tests comparing means from 1000 simulations of N(0,1) with n=10 or n=100:\n \n\nIn both cases, we expect 50 out of the 1000 tests to be significant by chance (i.e. with a p-value under 0.05). In my simulations, I get 40 and 45 false positive results, for n = 10 and n = 100, respectively. How many did you get?\nThese proportions are not significantly different from 5%.\nprop.test(45, 1000, p = 0.05, alternative = \"two.sided\", correct = TRUE)\n 1-sample proportions test with continuity correction\n data: 45 out of 1000, null probability 0.05\n X-squared = 0.42632, df = 1, p-value = 0.5138\nIt is important to note that, although alpha = 0.05 is commonly used, this is an arbitrary choice and you should consider what is an appropriate type 1 error rate for your particular investigation.\nAlthough it isn’t necessary to check that a statistical analysis as simple as a t-test does not yield more than 5% false-positive results, in situations where the structure of the data is complex and analysed with more advanced models (e.g. when explanatory variables are mathematically linked to each other or are combined in a mixed-effect model), this may allow to compare different modelling approaches and select one that does not produce more than 5% false-positive results.\nSuch complex example, where simulation is the only viable approach to construct a statistical model that does not lead to spurious effects, can be found in this paper:\n\nIhle, M., Pick, J. L., Winney, I. S., Nakagawa, S., & Burke, T. (2019). Measuring Up to Reality: Null Models and Analysis Simulations to Study Parental Coordination Over Provisioning Offspring. Frontiers in Ecology and Evolution, 7, 142. https://doi.org/10.3389/fevo.2019.00142\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Simulate to check alpha"
    ]
  },
  {
    "objectID": "tutorial_pages/definition.html",
    "href": "tutorial_pages/definition.html",
    "title": "Definition",
    "section": "",
    "text": "Definition\n“A computer simulation (or ‘sim’) is an attempt to model a real-life or hypothetical situation on a computer so that it can be studied to see how the system works. By changing variables in the simulation, predictions may be made about the behavior of the system. It is a tool to virtually investigate the behavior of the system under study.”\n      Wikipedia\n“A computer simulation is the generation of random data to build up an understanding of the real data and the statistical models we use to analyze them.”\n      Malika\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Definition"
    ]
  },
  {
    "objectID": "tutorial_pages/dry-rule.html",
    "href": "tutorial_pages/dry-rule.html",
    "title": "Do not Repeat Yourself – DRY rule",
    "section": "",
    "text": "Following the WET rule:\n\nMakes changes more difficult and/or time consuming.\n\nDecreases code clarity.\n\nIncreases the likelihood of inconsistencies.\n\nTo prevent duplication and follow the DRY rule, we can write custom functions.\nFunctions are ‘self-contained’ sets of commands that accomplish a specific task.\nFunctions usually ‘take in’ data or parameter values (these inputs are called ‘function arguments’), process them, and ‘return’ a result. You’ve already used several functions in this tutorial; for example rnorm(n, mean, sd), where n, mean, and sd are inputs and the result is a random sample from the normal distribution. The only difference here is that you are writing the function yourself. Once a function is written, it can be used over and over again by calling its name, just like other functions such as rnorm().\nTo write your own function, use the function function:\nAwesomeFunctionName &lt;- function(argument1, argument2,…) {  \n  do stuff here  \n}\nTo build up a function, start by writing the “stuff” outside the function to test that it works.\n\nYOUR TURN:\n1. Create a function that repeats the calculation of the mean of 100 values drawn from a standard normal distribution (use mean(rnorm(n = 100)) for this calculation) nrep times and returns a histogram of the nrep means.\n2. Modify your function such that, in addition to nrep, the number of drawn values n (i.e. argument n of the rnorm() function) can also be varied when calling your function.\n\nNote that it is useful to define nrep outside of the function, so users of your script can more easily change that value, e.g. from a low number (to verify the script runs without error) to a large number (to obtain reliable results).",
    "crumbs": [
      "Tutorial",
      "DRY rule"
    ]
  },
  {
    "objectID": "tutorial_pages/dry-rule.html#vs.-write-everything-twice-wet-rule",
    "href": "tutorial_pages/dry-rule.html#vs.-write-everything-twice-wet-rule",
    "title": "Do not Repeat Yourself – DRY rule",
    "section": "",
    "text": "Following the WET rule:\n\nMakes changes more difficult and/or time consuming.\n\nDecreases code clarity.\n\nIncreases the likelihood of inconsistencies.\n\nTo prevent duplication and follow the DRY rule, we can write custom functions.\nFunctions are ‘self-contained’ sets of commands that accomplish a specific task.\nFunctions usually ‘take in’ data or parameter values (these inputs are called ‘function arguments’), process them, and ‘return’ a result. You’ve already used several functions in this tutorial; for example rnorm(n, mean, sd), where n, mean, and sd are inputs and the result is a random sample from the normal distribution. The only difference here is that you are writing the function yourself. Once a function is written, it can be used over and over again by calling its name, just like other functions such as rnorm().\nTo write your own function, use the function function:\nAwesomeFunctionName &lt;- function(argument1, argument2,…) {  \n  do stuff here  \n}\nTo build up a function, start by writing the “stuff” outside the function to test that it works.\n\nYOUR TURN:\n1. Create a function that repeats the calculation of the mean of 100 values drawn from a standard normal distribution (use mean(rnorm(n = 100)) for this calculation) nrep times and returns a histogram of the nrep means.\n2. Modify your function such that, in addition to nrep, the number of drawn values n (i.e. argument n of the rnorm() function) can also be varied when calling your function.\n\nNote that it is useful to define nrep outside of the function, so users of your script can more easily change that value, e.g. from a low number (to verify the script runs without error) to a large number (to obtain reliable results).",
    "crumbs": [
      "Tutorial",
      "DRY rule"
    ]
  },
  {
    "objectID": "tutorial_pages/limitations.html",
    "href": "tutorial_pages/limitations.html",
    "title": "Limitations to simulations",
    "section": "",
    "text": "Limitations to simulations\n\nAssumptions made regarding variables might not be true, e.g. the distribution of supposedly normally distributed data may not be quite normal. (Have a back-up analysis plan!)\nParameter space may be unknown. (Explore it a bit and use previous observations to be at least in a relevant range.)\nComputational resources and time. (Use research software engineer staff on campus to optimize code, use parallel core processing, use server services on campus, etc.)\nSimulations might be redundant with mathematical demonstrations. (I don’t mind, still useful for me!)\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Limitations"
    ]
  },
  {
    "objectID": "tutorial_pages/purpose.html",
    "href": "tutorial_pages/purpose.html",
    "title": "Purpose",
    "section": "",
    "text": "Purpose\nYou can use computer simulations to:\n\nTest your statistical intuition or demonstrate mathematical properties you cannot easily anticipate.\n\nExample: Check whether there are more than 5% significant effects for a variable in a model when supposedly random data are generated.\n\n\nUnderstand sampling theory and probability distributions or test whether you understand the underlying processes of your system.\n\nExample: See whether simulated data drawn from specific distributions is comparable to real data.\n\n\nPerform power analyses.\n\nExample: Assess whether the sample size (within a replicate) is high enough to detect a simulated effect in more than 80% of the cases.\n\n\nPerform bootstrapping to get a confidence interval around a parameter estimate.\n\nBootstrapping means to sample with replacement (i.e. all the original options to draw from are available at each draw) in an observed dataset. Doing this generates new ‘simulated’ datasets. With each of them, one can run the statistical analysis made on the observed dataset, saving each time the parameter estimate of interest. After doing this multiple times, one can obtain a confidence interval for the parameter of interest.\n\n\nPrepare a pre-analysis plan.\n\nTo be confident about the (confirmatory) statistical analyses you may wish to commit to before data collection (e.g. through a preregistration or registered report), practising the analyses on a simulated dataset is very helpful! If you are still unsure about the most appropriate statistical test to apply to your data, providing a simulated dataset to a statistician or mentor will allow them to provide concrete suggestions! The code containing the analyses of simulated data can be submitted along with your preregistration or registered report for reviewers to exactly understand what analyses you intend to perform. Once you get your real data, you may simply plug them into this code and get the results of your confirmatory analyses immediately!\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Purpose"
    ]
  },
  {
    "objectID": "tutorial_pages/real-life-example.html",
    "href": "tutorial_pages/real-life-example.html",
    "title": "Real-life example",
    "section": "",
    "text": "Real-life example\nThis is a walk through one relatively simple simulation written to check whether the following two models would provide the same results:\n\nA generalized linear model based on a contingency table of counts (Poisson distribution).\n\nA generalized linear model with one line per observation and the occurrence of the variable of interest coded as ‘Yes’ or ‘No’ (binomial distribution).\n\nI created this code while preparing my preregistration for a simple behavioural ecology experiment about methods for independently manipulating palatability and colour in small insect prey (article, OSF preregistration).\nThe R script screenshot below, glm_Freq_vs_YN.R, can be found in the folder Ihle2020.\n\nThis walkthrough will use the steps as defined on the page ‘General structure’.\n\nDefine sample sizes (within a dataset and number of replicates), experimental design (fixed dataset structure, e.g. treatment groups, factors), and parameters that will need to vary (here, the strength of the effect).\n\n\nGenerate data (here, using sample() and the probabilities defined in step 1) and format it in two different ways to accommodate the two statistical tests to be compared.\n\n\nRun the statistical test and save the parameter estimate of interest for that iteration. Here, this is done for both statistical tests to be compared.\n\n\nReplicate steps 2 (data simulation) and 3 (data analyses) to get the distribution of the parameter estimates by wrapping these steps in a function.\nDefinition of the function at the beginning:  \n Output returned from the function at the end:  \n Replicate the function nrep times. Here, pbreplicate() is used to provide a bar of progress for R to run this command.  \n\nExplore the parameter space. Here, vary the probabilities of sampling between 0 and 1 depending on the treatment group category.\n\n\nAnalyse and interpret the combined results of many simulations. In this case, the results of the two models were qualitatively the same (comparison of results for a few simulations), and both models gave the same expected 5% false positive results when no effect was simulated. Varying the effect (the probability of sampling 0 or 1 depending on the experimental treatment) allowed us to find the minimum effect size for which the number of positive results of the tests is over 80%.\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Real-life example"
    ]
  },
  {
    "objectID": "tutorial_pages/resources.html",
    "href": "tutorial_pages/resources.html",
    "title": "Resources",
    "section": "",
    "text": "https://lmu-osc.github.io/Simulations-for-Advanced-Power-Analyses/\n\n\n\n\nThe article suggested for getting familiarised with the topic prior to the session, i.e. Hallgren, A. K. (2013). Conducting simulation studies in the R programming environment. Tutorials in Quantitative Methods for Psychology, 9(2), 43–60, contains accompanying R scripts and CSV data files which you can peruse in the Hallgren2013 folder of this repository. It contains:\n\nAnnotated R syntax file for Example 1: novel question.R.\n\nAnnotated R syntax file for Example 2: power analysis.R.\n\nAnnotated R syntax file for Example 3: bootstrapping.R.\n\nCSV dataset generated in Example 1, which is also used later in Example 2: novel_question_output.csv.\n\nCSV dataset used in Example 3: mediation_raw_data.csv.\n\n\n\n\nDepending on the type of simulation that would be useful for you, these articles may be of interest:\n\nJohnson, P. C. D., Barry, S. J. E., Ferguson, H. M., & Müller, P. (2015). Power analysis for generalized linear mixed models in ecology and evolution. Methods in Ecology and Evolution, 6(2), 133–142. https://doi.org/10.1111/2041-210X.12306\nBlanco, D., Schroter, S., Aldcroft, A., Moher, D., Boutron, I., Kirkham, J. J., & Cobo, E. (2020). Effect of an editorial intervention to improve the completeness of reporting of randomised trials: a randomised controlled trial. BMJ Open, 10(5), e036799. https://doi.org/10.1136/bmjopen-2020-036799\n\nIn the “Power analysis” section, there is a simple example of a power simulation. R code is provided in the supplementary material.\n\nMuldoon, A. (2018). Getting started simulating data in R: some helpful functions and how to use them. https://aosmith.rbind.io/2018/08/29/getting-started-simulating-data/\n\nThis blog gives a great overview of how to start simulating more complex datasets, including step-by-step explanations of relevant R functions.\n\nPrivé, F., Aschard, H., Ziyatdinov, A., & Blum, M. G. B. (2018). Efficient analysis of large-scale genome-wide data with two R packages: bigstatsr and bigsnpr. Bioinformatics, 34(16), 2781–2787. https://doi.org/10.1093/bioinformatics/bty185\nRönnegård, L., McFarlane, S. E., Husby, A., Kawakami, T., Ellegren, H., & Qvarnström, A. (2016). Increasing the power of genome wide association studies in natural populations using repeated measures – evaluation and implementation. Methods in Ecology and Evolution, 7(7), 792–799. https://doi.org/10.1111/2041-210X.12535\nDalpiaz, D. (2020). Applied Statistics with R, section “Simulating SLR” in the chapter “Simple Linear Regression”. https://daviddalpiaz.github.io/appliedstats/simple-linear-regression.html#simulating-slr\n\n\n\n\n\nlme4: Bolker, B. Simulation-based power analysis for mixed models in lme4. https://rpubs.com/bbolker/simpower\nsimstudy: Goldfeld, K., & Wujciak-Jens, J. Simulating Study Data. https://cran.r-project.org/web/packages/simstudy/vignettes/simstudy.html\nfaux: DeBruine, L. (2023). faux: Simulation for Factorial Designs. https://debruine.github.io/faux/\nsimsem (SIMulated Structural Equation Modeling): Pornprasertmanit, S., Miller, P., Schoemann, A., & Jorgensen, T. Vignette. https://github.com/simsem/simsem/wiki/Vignette\nsimglm: LeBeau, B. Tidy Simulation with simglm. https://cran.r-project.org/web/packages/simglm/vignettes/tidy_simulation.html\npowerlmm: Magnusson, K. (2018). New paper: The consequences of ignoring therapist effects in longitudinal data analysis. https://rpsychologist.com/therapists-effects-longitudinal",
    "crumbs": [
      "Tutorial",
      "Additional resources"
    ]
  },
  {
    "objectID": "tutorial_pages/resources.html#follow-up-self-paced-tutorial-on-simulation-of-data-analyses-for-advanced-power-analyses",
    "href": "tutorial_pages/resources.html#follow-up-self-paced-tutorial-on-simulation-of-data-analyses-for-advanced-power-analyses",
    "title": "Resources",
    "section": "",
    "text": "https://lmu-osc.github.io/Simulations-for-Advanced-Power-Analyses/",
    "crumbs": [
      "Tutorial",
      "Additional resources"
    ]
  },
  {
    "objectID": "tutorial_pages/resources.html#hallgren-2013",
    "href": "tutorial_pages/resources.html#hallgren-2013",
    "title": "Resources",
    "section": "",
    "text": "The article suggested for getting familiarised with the topic prior to the session, i.e. Hallgren, A. K. (2013). Conducting simulation studies in the R programming environment. Tutorials in Quantitative Methods for Psychology, 9(2), 43–60, contains accompanying R scripts and CSV data files which you can peruse in the Hallgren2013 folder of this repository. It contains:\n\nAnnotated R syntax file for Example 1: novel question.R.\n\nAnnotated R syntax file for Example 2: power analysis.R.\n\nAnnotated R syntax file for Example 3: bootstrapping.R.\n\nCSV dataset generated in Example 1, which is also used later in Example 2: novel_question_output.csv.\n\nCSV dataset used in Example 3: mediation_raw_data.csv.",
    "crumbs": [
      "Tutorial",
      "Additional resources"
    ]
  },
  {
    "objectID": "tutorial_pages/resources.html#other-articles",
    "href": "tutorial_pages/resources.html#other-articles",
    "title": "Resources",
    "section": "",
    "text": "Depending on the type of simulation that would be useful for you, these articles may be of interest:\n\nJohnson, P. C. D., Barry, S. J. E., Ferguson, H. M., & Müller, P. (2015). Power analysis for generalized linear mixed models in ecology and evolution. Methods in Ecology and Evolution, 6(2), 133–142. https://doi.org/10.1111/2041-210X.12306\nBlanco, D., Schroter, S., Aldcroft, A., Moher, D., Boutron, I., Kirkham, J. J., & Cobo, E. (2020). Effect of an editorial intervention to improve the completeness of reporting of randomised trials: a randomised controlled trial. BMJ Open, 10(5), e036799. https://doi.org/10.1136/bmjopen-2020-036799\n\nIn the “Power analysis” section, there is a simple example of a power simulation. R code is provided in the supplementary material.\n\nMuldoon, A. (2018). Getting started simulating data in R: some helpful functions and how to use them. https://aosmith.rbind.io/2018/08/29/getting-started-simulating-data/\n\nThis blog gives a great overview of how to start simulating more complex datasets, including step-by-step explanations of relevant R functions.\n\nPrivé, F., Aschard, H., Ziyatdinov, A., & Blum, M. G. B. (2018). Efficient analysis of large-scale genome-wide data with two R packages: bigstatsr and bigsnpr. Bioinformatics, 34(16), 2781–2787. https://doi.org/10.1093/bioinformatics/bty185\nRönnegård, L., McFarlane, S. E., Husby, A., Kawakami, T., Ellegren, H., & Qvarnström, A. (2016). Increasing the power of genome wide association studies in natural populations using repeated measures – evaluation and implementation. Methods in Ecology and Evolution, 7(7), 792–799. https://doi.org/10.1111/2041-210X.12535\nDalpiaz, D. (2020). Applied Statistics with R, section “Simulating SLR” in the chapter “Simple Linear Regression”. https://daviddalpiaz.github.io/appliedstats/simple-linear-regression.html#simulating-slr",
    "crumbs": [
      "Tutorial",
      "Additional resources"
    ]
  },
  {
    "objectID": "tutorial_pages/resources.html#use-of-r-packages-to-run-simulations",
    "href": "tutorial_pages/resources.html#use-of-r-packages-to-run-simulations",
    "title": "Resources",
    "section": "",
    "text": "lme4: Bolker, B. Simulation-based power analysis for mixed models in lme4. https://rpubs.com/bbolker/simpower\nsimstudy: Goldfeld, K., & Wujciak-Jens, J. Simulating Study Data. https://cran.r-project.org/web/packages/simstudy/vignettes/simstudy.html\nfaux: DeBruine, L. (2023). faux: Simulation for Factorial Designs. https://debruine.github.io/faux/\nsimsem (SIMulated Structural Equation Modeling): Pornprasertmanit, S., Miller, P., Schoemann, A., & Jorgensen, T. Vignette. https://github.com/simsem/simsem/wiki/Vignette\nsimglm: LeBeau, B. Tidy Simulation with simglm. https://cran.r-project.org/web/packages/simglm/vignettes/tidy_simulation.html\npowerlmm: Magnusson, K. (2018). New paper: The consequences of ignoring therapist effects in longitudinal data analysis. https://rpsychologist.com/therapists-effects-longitudinal",
    "crumbs": [
      "Tutorial",
      "Additional resources"
    ]
  },
  {
    "objectID": "tutorial_pages/seed.html",
    "href": "tutorial_pages/seed.html",
    "title": "Setting the seed",
    "section": "",
    "text": "Setting the seed\n\nset.seed()\n\nComputers in general, and R specifically, can, in fact, only provide pseudorandom number generators.\nA pseudorandom number generator’s number sequence is completely determined by its seed, i.e. a number used to initialize that sequence.\nThus, if a pseudorandom number generator is reinitialized with the same seed, it will produce the same sequence of numbers. You can set the seed (with any arbitrary number) at the beginning of a script, and, if commands drawing random numbers are run in the exact same order, they will provide the same output in subsequent runs.\nThis is useful for sharing code and reproduce simulations, as well as for debugging code.\n\nYOUR TURN:\nIn your local exercise script, play around with the function set.seed() by running and modifying the examples provided (e.g. compare outputs with and without seeds, change the seed number).\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorial",
      "Setting the seed"
    ]
  }
]